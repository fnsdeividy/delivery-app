import { apiClient } from '@/lib/api-client'
import { CreateUserDto, LoginDto } from '@/types/cardapio-api'
import { useMutation, useQueryClient } from '@tanstack/react-query'
import { useRouter } from 'next/navigation'
import { useState } from 'react'

export function useCardapioAuth() {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const queryClient = useQueryClient()
  const router = useRouter()

  // Mutation para login
  const loginMutation = useMutation({
    mutationFn: async (credentials: LoginDto & { storeSlug?: string }) => {
      setIsLoading(true)
      setError(null)
      
      try {
        console.log('üîç Iniciando autentica√ß√£o com credenciais:', { email: credentials.email, storeSlug: credentials.storeSlug })
        
        const response = await apiClient.authenticate(credentials.email, credentials.password, credentials.storeSlug)
        
        console.log('üì° Resposta da API recebida:', response)
        console.log('üîç Tipo da resposta:', typeof response)
        console.log('üîç Estrutura da resposta:', Object.keys(response || {}))
        
        // Validar se a resposta cont√©m o token
        if (!response || typeof response !== 'object') {
          console.error('‚ùå Resposta inv√°lida:', response)
          throw new Error('Resposta inv√°lida da API')
        }
        
        if (!response.access_token || typeof response.access_token !== 'string') {
          console.error('‚ùå Token inv√°lido:', { 
            hasAccessToken: !!response.access_token, 
            tokenType: typeof response.access_token,
            tokenValue: response.access_token 
          })
          throw new Error('Token de acesso inv√°lido ou ausente na resposta')
        }
        
        console.log('üîë Token extra√≠do:', response.access_token)
        console.log('üîç Tipo do token:', typeof response.access_token)
        
        // Validar se o token tem o formato JWT correto (3 partes separadas por ponto)
        const tokenParts = response.access_token.split('.')
        console.log('üîç Partes do token JWT:', tokenParts)
        console.log('üîç N√∫mero de partes:', tokenParts.length)
        
        if (tokenParts.length !== 3) {
          console.error('‚ùå Formato JWT inv√°lido:', tokenParts)
          throw new Error('Formato de token JWT inv√°lido')
        }
        
        // Decodificar o token JWT para obter informa√ß√µes do usu√°rio
        let payload: any
        try {
          payload = JSON.parse(atob(tokenParts[1]))
        } catch (decodeError) {
          console.warn('Erro ao decodificar JWT, usando dados da resposta:', decodeError)
          // Fallback: usar dados do usu√°rio da resposta da API
          if (response.user) {
            payload = {
              sub: response.user.id,
              email: response.user.email,
              name: response.user.name,
              role: response.user.role,
              storeSlug: response.user.storeSlug
            }
          } else {
            throw new Error('N√£o foi poss√≠vel obter informa√ß√µes do usu√°rio')
          }
        }
        
        // Invalidar queries relacionadas ao usu√°rio
        queryClient.invalidateQueries({ queryKey: ['user'] })
        queryClient.invalidateQueries({ queryKey: ['stores'] })
        
        // Retornar dados do usu√°rio do token ou da resposta da API
        return {
          user: {
            id: payload.sub,
            email: payload.email,
            name: payload.name || payload.email.split('@')[0], // Usar name do token se dispon√≠vel
            role: response.user?.role || payload.role, // Priorizar role da resposta da API
            storeSlug: credentials.storeSlug || response.user?.storeSlug || payload.storeSlug || null
          }
        }
      } catch (err: any) {
        const errorMessage = err.message || 'Erro desconhecido durante o login'
        setError(errorMessage)
        throw new Error(errorMessage)
      } finally {
        setIsLoading(false)
      }
    },
    onSuccess: (data, variables) => {
      console.log('üéâ Login bem-sucedido:', data)
      console.log('üîë Token armazenado, tentando redirecionar...')
      console.log('üìã Dados do login:', { 
        role: data.user.role, 
        storeSlug: data.user.storeSlug,
        originalStoreSlug: variables.storeSlug 
      })
      
      // Redirecionar baseado no role do usu√°rio
      console.log('üîç Verificando role do usu√°rio:', data.user.role)
      
      if (data.user.role === 'SUPER_ADMIN') {
        console.log('üëë Redirecionando super admin para /admin')
        router.push('/admin')
        return // Parar aqui para SUPER_ADMIN
      } else if (data.user.role === 'CLIENTE') {
        console.log('üè† Usu√°rio cliente, redirecionando para home')
        router.push('/')
        return // Parar aqui para CLIENTE
      } else if (data.user.role === 'ADMIN') {
        // Para ADMIN, usar l√≥gica inteligente de redirecionamento
        console.log('üîç Verificando contexto da loja para ADMIN...')
        
        // 1. Verificar storeSlug das vari√°veis de login
        let storeSlug = variables.storeSlug
        
        // 2. Se n√£o houver nas vari√°veis, verificar no usu√°rio retornado
        if (!storeSlug && data.user.storeSlug) {
          storeSlug = data.user.storeSlug
          console.log('üìã StoreSlug obtido do usu√°rio:', storeSlug)
        }
        
        // 3. Se ainda n√£o houver, verificar no localStorage
        if (!storeSlug) {
          const storedStoreSlug = localStorage.getItem('currentStoreSlug')
          if (storedStoreSlug) {
            storeSlug = storedStoreSlug
            console.log('üíæ StoreSlug obtido do localStorage:', storeSlug)
          }
        }
        
        // 4. Verificar se o storeSlug √© v√°lido
        if (storeSlug && storeSlug.trim() !== '') {
          // ADMIN com loja espec√≠fica - redirecionar para dashboard da loja
          const dashboardUrl = `/dashboard/${storeSlug}`
          console.log('üè™ Redirecionando ADMIN para dashboard da loja:', dashboardUrl)
          
          // Invalidar queries relacionadas
          console.log('üîÑ Invalidando queries relacionadas...')
          queryClient.invalidateQueries({ queryKey: ['store', storeSlug] })
          queryClient.invalidateQueries({ queryKey: ['stores'] })
          
          // Executar redirecionamento
          console.log('üöÄ Executando router.push...')
          try {
            router.push(dashboardUrl)
            console.log('‚úÖ Redirecionamento executado com sucesso')
          } catch (redirectError) {
            console.error('‚ùå Erro no redirecionamento:', redirectError)
            // Fallback: redirecionar para dashboard administrativo
            console.log('üîÑ Fallback: redirecionando para dashboard administrativo')
            router.push('/dashboard')
          }
        } else {
          // ADMIN sem loja espec√≠fica - redirecionar para dashboard administrativo
          console.log('‚öôÔ∏è ADMIN sem loja espec√≠fica, redirecionando para dashboard administrativo')
          router.push('/dashboard')
        }
      }
    },
    onError: (err: any) => {
      console.error('Erro no login:', err)
      setError(err.message)
    },
  })

  // Mutation para registro
  const registerMutation = useMutation({
    mutationFn: async (userData: CreateUserDto) => {
      setIsLoading(true)
      setError(null)
      
      try {
        console.log('üìù Registrando usu√°rio:', userData.email)
        const response = await apiClient.register(userData)
        console.log('‚úÖ Usu√°rio registrado com sucesso:', response)
        
        // O apiClient.register j√° armazena o token automaticamente
        if (response.access_token) {
          console.log('üîë Token de registro armazenado automaticamente')
        }
        
        return response
      } catch (err: any) {
        const errorMessage = err.message || 'Erro desconhecido durante o registro'
        console.error('‚ùå Erro no registro:', errorMessage)
        setError(errorMessage)
        throw new Error(errorMessage)
      } finally {
        setIsLoading(false)
      }
    },
    onSuccess: (data, variables) => {
      console.log('üéâ Registro bem-sucedido, token j√° armazenado')
      
      // Invalidar queries para atualizar estado da aplica√ß√£o
      queryClient.invalidateQueries({ queryKey: ['user'] })
      queryClient.invalidateQueries({ queryKey: ['stores'] })
      
      // N√£o fazer login autom√°tico pois o registro j√° retorna o token
      // O token j√° foi armazenado pelo apiClient.register()
    },
    onError: (err: any) => {
      console.error('‚ùå Erro na mutation de registro:', err.message)
      setError(err.message)
    },
  })

  // Fun√ß√£o para logout
  const logout = () => {
    apiClient.logout()
    queryClient.clear()
    router.push('/login')
  }

  // Fun√ß√£o para verificar se est√° autenticado
  const isAuthenticated = () => {
    return apiClient.isAuthenticated()
  }

  // Fun√ß√£o para obter token atual
  const getCurrentToken = () => {
    return apiClient.getCurrentToken()
  }

  return {
    // Estados
    isLoading,
    error,
    
    // A√ß√µes
    login: loginMutation.mutate,
    register: registerMutation.mutate,
    logout,
    
    // Utilit√°rios
    isAuthenticated,
    getCurrentToken,
    
    // Mutations para uso direto
    loginMutation,
    registerMutation,
  }
} 