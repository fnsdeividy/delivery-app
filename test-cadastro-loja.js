/**
 * Teste de Fluxo - Cadastro de Nova Loja
 * 
 * Este script testa o fluxo completo:
 * 1. Acesso √† p√°gina inicial
 * 2. Navega√ß√£o para cadastro de loja
 * 3. Preenchimento com dados fict√≠cios
 * 4. Submiss√£o do formul√°rio
 * 5. Verifica√ß√£o do redirecionamento para dashboard
 */

const puppeteer = require('puppeteer');

// Dados fict√≠cios para o teste
const dadosLoja = {
  // Dados do usu√°rio
  nome: 'Jo√£o Silva Santos',
  email: 'joao.teste.loja@gmail.com',
  senha: '123456789',
  confirmarSenha: '123456789',
  
  // Dados da loja
  nomeLoja: 'Pizzaria Bella Vista',
  telefone: '(11) 99999-8888',
  endereco: 'Rua das Flores, 123',
  cidade: 'S√£o Paulo',
  estado: 'SP',
  cep: '01234-567',
  
  // Dados adicionais
  cnpj: '12.345.678/0001-90',
  categoria: 'Pizzaria'
};

async function testarFluxoCadastroLoja() {
  console.log('üöÄ Iniciando teste de fluxo - Cadastro de Loja');
  console.log('üìã Dados fict√≠cios:', dadosLoja);
  
  const browser = await puppeteer.launch({
    headless: false, // Mostrar o browser para visualizar o teste
    slowMo: 500,     // Delay entre a√ß√µes para melhor visualiza√ß√£o
    defaultViewport: { width: 1200, height: 800 }
  });
  
  const page = await browser.newPage();
  
  try {
    // PASSO 1: Acessar p√°gina inicial
    console.log('\nüìç PASSO 1: Acessando p√°gina inicial (localhost:3000)');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // PASSO 2: Navegar para cadastro de loja
    console.log('\nüìç PASSO 2: Navegando para cadastro de loja');
    
    // Procurar bot√£o "Cadastrar" ou link para registro
    const cadastrarButton = await page.$('a[href*="register"]');
    if (cadastrarButton) {
      await cadastrarButton.click();
      console.log('‚úÖ Clicou no bot√£o Cadastrar');
    } else {
      // Tentar navegar diretamente
      await page.goto('http://localhost:3000/register', { waitUntil: 'networkidle2' });
      console.log('‚úÖ Navegou diretamente para /register');
    }
    
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Verificar se existe op√ß√£o para cadastro de loja
    const lojaOption = await page.$('a[href*="loja"]');
    if (lojaOption) {
      await lojaOption.click();
      console.log('‚úÖ Selecionou op√ß√£o de cadastro de loja');
      await new Promise(resolve => setTimeout(resolve, 2000));
    } else {
      // Navegar diretamente para cadastro de loja
      await page.goto('http://localhost:3000/register/loja', { waitUntil: 'networkidle2' });
      console.log('‚úÖ Navegou diretamente para /register/loja');
    }
    
    // PASSO 3: Preencher formul√°rio
    console.log('\nüìç PASSO 3: Preenchendo formul√°rio com dados fict√≠cios');
    
    // Aguardar formul√°rio carregar
    await page.waitForSelector('form', { timeout: 10000 });
    
    // STEP 1: Preencher dados do propriet√°rio
    await preencherCampo(page, 'input[name="ownerName"]', dadosLoja.nome, 'Nome do Propriet√°rio');
    await preencherCampo(page, 'input[name="ownerEmail"]', dadosLoja.email, 'Email do Propriet√°rio');
    await preencherCampo(page, 'input[name="ownerPhone"]', dadosLoja.telefone, 'Telefone do Propriet√°rio');
    await preencherCampo(page, 'input[name="password"]', dadosLoja.senha, 'Senha');
    await preencherCampo(page, 'input[name="confirmPassword"]', dadosLoja.confirmarSenha, 'Confirmar Senha');
    
    // Clicar em "Pr√≥ximo" para ir para step 2
    console.log('üìç Avan√ßando para Step 2 - Dados da Loja');
    await clicarBotao(page, 'Pr√≥ximo', 'Pr√≥ximo Step 2');
    
    // STEP 2: Preencher dados da loja
    await preencherCampo(page, 'input[name="storeName"]', dadosLoja.nomeLoja, 'Nome da Loja');
    await preencherCampoOpcional(page, 'textarea[name="description"]', 'Melhor pizzaria da regi√£o com ingredientes frescos e entrega r√°pida!', 'Descri√ß√£o');
    await selecionarCategoria(page, dadosLoja.categoria);
    await preencherCampo(page, 'input[name="zipCode"]', dadosLoja.cep, 'CEP');
    await new Promise(resolve => setTimeout(resolve, 3000)); // Aguardar preenchimento autom√°tico do endere√ßo
    await preencherCampo(page, 'input[name="address"]', dadosLoja.endereco, 'Endere√ßo');
    await preencherCampo(page, 'input[name="city"]', dadosLoja.cidade, 'Cidade');
    await preencherCampo(page, 'input[name="state"]', dadosLoja.estado, 'Estado');
    
    // Clicar em "Pr√≥ximo" para ir para step 3
    console.log('üìç Avan√ßando para Step 3 - Confirma√ß√£o');
    await clicarBotao(page, 'Pr√≥ximo', 'Pr√≥ximo Step 3');
    
    // Campos opcionais se existirem
    await preencherCampoOpcional(page, 'input[name="cnpj"]', dadosLoja.cnpj, 'CNPJ');
    
    console.log('‚úÖ Formul√°rio preenchido com sucesso');
    
    // PASSO 4: Submeter formul√°rio
    console.log('\nüìç PASSO 4: Submetendo formul√°rio');
    
    // No step 3, procurar pelo bot√£o "Criar Loja" ou similar
    await clicarBotao(page, 'Criar', 'Criar Loja');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Aguardar redirecionamento ou resposta
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // PASSO 5: Verificar redirecionamento
    console.log('\nüìç PASSO 5: Verificando redirecionamento para dashboard');
    
    const currentUrl = page.url();
    console.log('üîó URL atual:', currentUrl);
    
    if (currentUrl.includes('/dashboard/') && currentUrl.includes('/')) {
      console.log('‚úÖ SUCESSO: Redirecionado para dashboard da loja!');
      
      // Extrair slug da loja da URL
      const urlParts = currentUrl.split('/dashboard/');
      if (urlParts.length > 1) {
        const storeSlug = urlParts[1].split('/')[0];
        console.log('üè™ Slug da loja criada:', storeSlug);
      }
      
      // Verificar se p√°gina do dashboard carregou
      await page.waitForSelector('h1, h2, [data-testid="dashboard"]', { timeout: 10000 });
      console.log('‚úÖ Dashboard carregado com sucesso');
      
    } else if (currentUrl.includes('/login')) {
      console.log('‚ö†Ô∏è  Redirecionado para login - pode ser necess√°rio autentica√ß√£o');
    } else {
      console.log('‚ùå Redirecionamento inesperado ou erro no cadastro');
    }
    
    // Screenshot final
    await page.screenshot({ path: 'teste-cadastro-resultado.png', fullPage: true });
    console.log('üì∏ Screenshot salvo como teste-cadastro-resultado.png');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    await page.screenshot({ path: 'teste-cadastro-erro.png', fullPage: true });
    console.log('üì∏ Screenshot do erro salvo como teste-cadastro-erro.png');
  } finally {
    console.log('\nüèÅ Teste finalizado');
    await browser.close();
  }
}

// Fun√ß√£o auxiliar para preencher campos
async function preencherCampo(page, selector, valor, nomeCampo) {
  try {
    await page.waitForSelector(selector, { timeout: 5000 });
    await page.click(selector);
    await page.evaluate((sel) => document.querySelector(sel).value = '', selector);
    await page.type(selector, valor, { delay: 100 });
    console.log(`‚úÖ ${nomeCampo}: ${valor}`);
  } catch (error) {
    console.log(`‚ö†Ô∏è  Campo ${nomeCampo} (${selector}) n√£o encontrado`);
  }
}

// Fun√ß√£o auxiliar para campos opcionais
async function preencherCampoOpcional(page, selector, valor, nomeCampo) {
  try {
    const elemento = await page.$(selector);
    if (elemento) {
      await page.click(selector);
      await page.evaluate((sel) => document.querySelector(sel).value = '', selector);
      await page.type(selector, valor, { delay: 100 });
      console.log(`‚úÖ ${nomeCampo}: ${valor}`);
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è  Campo opcional ${nomeCampo} n√£o encontrado`);
  }
}

// Fun√ß√£o auxiliar para selecionar categoria
async function selecionarCategoria(page, categoria) {
  try {
    await page.waitForSelector('select[name="category"]', { timeout: 5000 });
    await page.select('select[name="category"]', categoria);
    console.log(`‚úÖ Categoria selecionada: ${categoria}`);
  } catch (error) {
    console.log(`‚ö†Ô∏è  N√£o foi poss√≠vel selecionar categoria: ${categoria}`);
  }
}

// Fun√ß√£o auxiliar para clicar em bot√µes
async function clicarBotao(page, texto, nomeBotao) {
  try {
    // Tentar diferentes seletores para encontrar o bot√£o
    const seletores = [
      `button:contains("${texto}")`,
      `button[type="button"]`,
      `button[type="submit"]`,
      `input[type="submit"]`,
      `[role="button"]`
    ];
    
    let botaoEncontrado = false;
    for (const seletor of seletores) {
      try {
        const botao = await page.$(seletor);
        if (botao) {
          const textoVisivel = await page.evaluate(el => el.textContent, botao);
          if (textoVisivel && textoVisivel.toLowerCase().includes(texto.toLowerCase())) {
            await botao.click();
            console.log(`‚úÖ Clicou no bot√£o: ${nomeBotao}`);
            botaoEncontrado = true;
            break;
          }
        }
      } catch (e) {
        continue;
      }
    }
    
    if (!botaoEncontrado) {
      // Tentar clicar em qualquer bot√£o vis√≠vel
      const botoes = await page.$$('button:not([disabled])');
      if (botoes.length > 0) {
        await botoes[botoes.length - 1].click(); // Clicar no √∫ltimo bot√£o (geralmente √© o de a√ß√£o)
        console.log(`‚úÖ Clicou no bot√£o dispon√≠vel: ${nomeBotao}`);
      } else {
        console.log(`‚ö†Ô∏è  Bot√£o ${nomeBotao} n√£o encontrado`);
      }
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è  Erro ao clicar no bot√£o ${nomeBotao}:`, error.message);
  }
}

// Executar o teste
if (require.main === module) {
  testarFluxoCadastroLoja().catch(console.error);
}

module.exports = { testarFluxoCadastroLoja, dadosLoja };
