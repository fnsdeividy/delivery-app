const axios = require('axios');

async function testStorePublicRoute() {
  const baseURL = 'http://localhost:3000';
  const testSlug = 'teteteadas232';
  
  console.log('üß™ Testando rota p√∫blica de lojas...\n');
  
  try {
    // Teste 1: Rota p√∫blica da loja
    console.log('1Ô∏è‚É£ Testando rota p√∫blica da loja...');
    const storeResponse = await axios.get(`${baseURL}/api/store-public/${testSlug}`);
    console.log('‚úÖ Loja encontrada:', {
      name: storeResponse.data.store.name,
      slug: storeResponse.data.store.slug,
      active: storeResponse.data.store.active,
      approved: storeResponse.data.store.approved
    });
    
    // Teste 2: Verificar produtos
    console.log('\n2Ô∏è‚É£ Verificando produtos da loja...');
    if (storeResponse.data.products && storeResponse.data.products.length > 0) {
      console.log('‚úÖ Produtos encontrados:', storeResponse.data.products.length);
      storeResponse.data.products.forEach(product => {
        console.log(`   - ${product.name}: R$ ${product.price}`);
      });
    } else {
      console.log('‚ö†Ô∏è Nenhum produto encontrado');
    }
    
    // Teste 3: Verificar categorias
    console.log('\n3Ô∏è‚É£ Verificando categorias da loja...');
    if (storeResponse.data.categories && storeResponse.data.categories.length > 0) {
      console.log('‚úÖ Categorias encontradas:', storeResponse.data.categories.length);
      storeResponse.data.categories.forEach(category => {
        console.log(`   - ${category.name}`);
      });
    } else {
      console.log('‚ö†Ô∏è Nenhuma categoria encontrada');
    }
    
    // Teste 4: Verificar configura√ß√µes
    console.log('\n4Ô∏è‚É£ Verificando configura√ß√µes da loja...');
    if (storeResponse.data.config) {
      console.log('‚úÖ Configura√ß√µes encontradas:', {
        address: storeResponse.data.config.address,
        phone: storeResponse.data.config.phone,
        email: storeResponse.data.config.email,
        deliveryFee: storeResponse.data.config.deliveryFee,
        minimumOrder: storeResponse.data.config.minimumOrder
      });
    } else {
      console.log('‚ö†Ô∏è Configura√ß√µes n√£o encontradas');
    }
    
    // Teste 5: Verificar status
    console.log('\n5Ô∏è‚É£ Verificando status da loja...');
    if (storeResponse.data.status) {
      console.log('‚úÖ Status da loja:', {
        isOpen: storeResponse.data.status.isOpen,
        reason: storeResponse.data.status.reason
      });
    } else {
      console.log('‚ö†Ô∏è Status n√£o encontrado');
    }
    
    console.log('\nüéâ Teste da rota p√∫blica conclu√≠do com sucesso!');
    console.log('\nüìã Resumo:');
    console.log('‚úÖ Rota p√∫blica funcionando');
    console.log('‚úÖ Dados da loja sendo retornados');
    console.log('‚úÖ Estrutura de dados correta');
    console.log('‚úÖ Pronto para integra√ß√£o com frontend');
    
  } catch (error) {
    console.error('\n‚ùå Erro no teste:', error.message);
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', error.response.data);
    }
    
    console.log('\nüîß Poss√≠veis solu√ß√µes:');
    console.log('1. Reiniciar o servidor de desenvolvimento (npm run dev)');
    console.log('2. Verificar se a rota foi criada corretamente');
    console.log('3. Verificar se n√£o h√° erros de sintaxe');
    
    process.exit(1);
  }
}

testStorePublicRoute(); 