import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function testLoginFlow() {
  console.log('üîÑ Testando fluxo completo de login e redirecionamento...')

  try {
    // Testar com diferentes tipos de usu√°rio
    const testUsers = [
      {
        name: 'Super Admin',
        email: 'admin@cardapio.com',
        password: 'admin123',
        expectedRole: 'SUPER_ADMIN',
        expectedRedirect: '/dashboard/gerenciar-lojas'
      },
      {
        name: 'Lojista Jo√£o',
        email: 'joao@botecodojao.com',
        password: 'lojista123',
        expectedRole: 'ADMIN',
        expectedRedirect: '/dashboard/boteco-do-joao'
      },
      {
        name: 'Lojista Teste',
        email: 'teste@exemplo.com',
        password: 'teste123',
        expectedRole: 'ADMIN',
        expectedRedirect: '/dashboard/restaurante-teste'
      }
    ]

    for (const testUser of testUsers) {
      console.log(`\nüë§ Testando: ${testUser.name}`)
      console.log('='.repeat(50))

      // Verificar se usu√°rio existe
      const user = await prisma.user.findUnique({
        where: { email: testUser.email }
      })

      if (!user) {
        console.log('‚ùå Usu√°rio n√£o encontrado')
        continue
      }

      console.log(`‚úÖ Usu√°rio encontrado: ${user.name}`)
      console.log(`   Role: ${user.role}`)
      console.log(`   Loja: ${user.storeSlug || 'N/A'}`)
      console.log(`   Ativo: ${user.active}`)

      // Testar senha
      const isValidPassword = await bcrypt.compare(testUser.password, user.password!)
      console.log(`üîë Senha v√°lida: ${isValidPassword ? '‚úÖ' : '‚ùå'}`)

      if (!isValidPassword) {
        console.log('‚ùå Senha incorreta')
        continue
      }

      // Verificar role
      if (user.role !== testUser.expectedRole) {
        console.log(`‚ùå Role incorreto. Esperado: ${testUser.expectedRole}, Encontrado: ${user.role}`)
        continue
      }

      console.log('‚úÖ Role correto')

      // Verificar redirecionamento
      let expectedRedirect = testUser.expectedRedirect
      if (user.role === 'ADMIN' && user.storeSlug) {
        expectedRedirect = `/dashboard/${user.storeSlug}`
      } else if (user.role === 'SUPER_ADMIN') {
        expectedRedirect = '/dashboard/gerenciar-lojas'
      }

      console.log(`üéØ Redirecionamento esperado: ${expectedRedirect}`)

      // Verificar se a loja existe (para ADMIN)
      if (user.role === 'ADMIN' && user.storeSlug) {
        const store = await prisma.store.findUnique({
          where: { slug: user.storeSlug }
        })
        
        if (store) {
          console.log(`‚úÖ Loja encontrada: ${store.name}`)
        } else {
          console.log(`‚ùå Loja n√£o encontrada: ${user.storeSlug}`)
        }
      }

      // Simular login via API
      console.log('\nüåê Simulando login via API...')
      
      const loginData = {
        email: testUser.email,
        password: testUser.password,
        userType: 'lojista'
      }

      const response = await fetch('http://localhost:3000/api/auth/callback/credentials', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(loginData),
      })

      console.log(`üìä Status da resposta: ${response.status}`)
      
      if (response.ok || response.status === 302) {
        console.log('‚úÖ Login bem-sucedido')
        console.log(`üéØ Deve redirecionar para: ${expectedRedirect}`)
      } else {
        console.log('‚ùå Erro no login')
        const data = await response.text()
        console.log(`üìÑ Resposta: ${data}`)
      }

      console.log('‚úÖ Teste conclu√≠do para este usu√°rio')
    }

  } catch (error) {
    console.error('‚ùå Erro no teste:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testLoginFlow()
  .then(() => {
    console.log('\n‚úÖ Todos os testes conclu√≠dos!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå Erro nos testes:', error)
    process.exit(1)
  }) 