import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function testCreateStore() {
  console.log('üè™ Testando cria√ß√£o de loja...')

  try {
    // Dados de teste para cria√ß√£o de loja
    const testData = {
      ownerName: 'Teste Silva',
      ownerEmail: 'teste@exemplo.com',
      ownerPhone: '(11) 12345-6789',
      password: 'teste123',
      storeName: 'Restaurante Teste',
      storeSlug: 'restaurante-teste',
      description: 'Restaurante de teste para valida√ß√£o',
      category: 'Restaurante',
      address: 'Rua Teste, 123',
      city: 'S√£o Paulo',
      state: 'SP',
      zipCode: '01234-567',
      deliveryEnabled: true,
      deliveryFee: '5.00',
      minimumOrder: '20.00'
    }

    console.log('üìã Dados de teste:')
    console.log(`   Propriet√°rio: ${testData.ownerName}`)
    console.log(`   Email: ${testData.ownerEmail}`)
    console.log(`   Loja: ${testData.storeName}`)
    console.log(`   Slug: ${testData.storeSlug}`)

    // Verificar se usu√°rio j√° existe
    const existingUser = await prisma.user.findUnique({
      where: { email: testData.ownerEmail }
    })

    if (existingUser) {
      console.log('‚ùå Usu√°rio j√° existe no banco')
      return
    }

    // Verificar se loja j√° existe
    const existingStore = await prisma.store.findUnique({
      where: { slug: testData.storeSlug }
    })

    if (existingStore) {
      console.log('‚ùå Loja j√° existe no banco')
      return
    }

    console.log('‚úÖ Dados v√°lidos para cria√ß√£o')

    // Simular chamada da API
    console.log('\nüåê Simulando chamada da API...')
    
    const response = await fetch('http://localhost:3000/api/auth/register/loja', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData),
    })

    const data = await response.json()

    console.log(`üìä Status da resposta: ${response.status}`)
    console.log(`üìÑ Dados da resposta:`, data)

    if (response.ok) {
      console.log('‚úÖ Loja criada com sucesso!')
      
      // Verificar se foi criada no banco
      const newUser = await prisma.user.findUnique({
        where: { email: testData.ownerEmail }
      })
      
      const newStore = await prisma.store.findUnique({
        where: { slug: testData.storeSlug }
      })

      console.log('\nüìã Verifica√ß√£o no banco:')
      console.log(`   Usu√°rio criado: ${newUser ? '‚úÖ' : '‚ùå'}`)
      console.log(`   Loja criada: ${newStore ? '‚úÖ' : '‚ùå'}`)
      
      if (newUser && newStore) {
        console.log('üéâ Tudo funcionando corretamente!')
      }
    } else {
      console.log('‚ùå Erro na cria√ß√£o da loja')
      console.log(`   Erro: ${data.error}`)
    }

  } catch (error) {
    console.error('‚ùå Erro no teste:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testCreateStore()
  .then(() => {
    console.log('\n‚úÖ Teste conclu√≠do!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå Erro no teste:', error)
    process.exit(1)
  }) 