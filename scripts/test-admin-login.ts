import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function testAdminLogin() {
  console.log('üëë Testando login do Super Admin...')

  try {
    // Buscar o admin
    const admin = await prisma.user.findUnique({
      where: { email: 'admin@cardapio.com' },
      include: { store: true }
    })

    if (!admin) {
      console.log('‚ùå Admin n√£o encontrado')
      return
    }

    console.log('‚úÖ Admin encontrado:')
    console.log(`   Nome: ${admin.name}`)
    console.log(`   Email: ${admin.email}`)
    console.log(`   Role: ${admin.role}`)
    console.log(`   Ativo: ${admin.active}`)
    console.log(`   Loja: ${admin.storeSlug}`)
    console.log(`   Tem senha: ${!!admin.password}`)

    // Testar senha
    const password = 'admin123'
    const isValidPassword = await bcrypt.compare(password, admin.password!)
    
    console.log(`\nüîë Teste de senha: ${isValidPassword ? '‚úÖ V√°lida' : '‚ùå Inv√°lida'}`)

    // Simular valida√ß√£o do NextAuth
    console.log('\nüîç Simulando valida√ß√£o do NextAuth:')
    
    if (!admin.active) {
      console.log('‚ùå Admin inativo')
      return
    }

    if (admin.role !== 'SUPER_ADMIN') {
      console.log('‚ùå Role n√£o √© SUPER_ADMIN')
      return
    }

    console.log('‚úÖ Todas as valida√ß√µes passaram!')
    console.log('‚úÖ Login deve funcionar corretamente')

    // Testar redirecionamento
    console.log('\nüéØ Testando redirecionamento:')
    if (admin.role === 'SUPER_ADMIN') {
      console.log('‚úÖ Deve redirecionar para: /dashboard/gerenciar-lojas')
    }

  } catch (error) {
    console.error('‚ùå Erro no teste:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testAdminLogin()
  .then(() => {
    console.log('\n‚úÖ Teste conclu√≠do!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå Erro no teste:', error)
    process.exit(1)
  }) 