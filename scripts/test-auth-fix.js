#!/usr/bin/env node

/**
 * Script para testar a corre√ß√£o do erro 401 na atualiza√ß√£o de status de pedidos
 *
 * Este script verifica:
 * 1. Se o token est√° sendo sincronizado corretamente entre localStorage e cookies
 * 2. Se as requisi√ß√µes est√£o sendo enviadas com headers de autentica√ß√£o
 * 3. Se o tratamento de erro 401 est√° funcionando
 */

const fs = require("fs");
const path = require("path");

console.log("üîç Verificando corre√ß√µes do erro 401...\n");

// Verificar se os arquivos foram modificados corretamente
const filesToCheck = [
  {
    path: "lib/api-client-server.ts",
    checks: [
      "getAuthToken",
      "Token expirado detectado no servidor",
      "Erro 401 - Token de autentica√ß√£o inv√°lido ou expirado",
    ],
  },
  {
    path: "hooks/useTokenSync.ts",
    checks: [
      "Tentativa.*de sincroniza√ß√£o de token",
      "Token sincronizado com sucesso",
      "Falha ao sincronizar token ap√≥s m√∫ltiplas tentativas",
    ],
  },
  {
    path: "lib/api-client.ts",
    checks: [
      "Erro 401 detectado - Token inv√°lido ou expirado",
      "session_expired",
      "window.location.pathname.includes",
    ],
  },
  {
    path: "components/orders/OrderCard.tsx",
    checks: [
      "useErrorNotification",
      "showNotification",
      "ErrorNotification",
      "disabled:hover:shadow-sm",
    ],
  },
  {
    path: "components/ui/error-notification.tsx",
    checks: [
      "ErrorNotification",
      "useErrorNotification",
      "transform transition-all duration-300",
    ],
  },
];

let allChecksPassed = true;

filesToCheck.forEach(({ path: filePath, checks }) => {
  const fullPath = path.join(__dirname, "..", filePath);

  if (!fs.existsSync(fullPath)) {
    console.log(`‚ùå Arquivo n√£o encontrado: ${filePath}`);
    allChecksPassed = false;
    return;
  }

  const content = fs.readFileSync(fullPath, "utf8");
  const missingChecks = [];

  checks.forEach((check) => {
    const regex = new RegExp(check, "i");
    if (!regex.test(content)) {
      missingChecks.push(check);
    }
  });

  if (missingChecks.length === 0) {
    console.log(`‚úÖ ${filePath} - Todas as verifica√ß√µes passaram`);
  } else {
    console.log(`‚ùå ${filePath} - Faltando verifica√ß√µes:`);
    missingChecks.forEach((check) => {
      console.log(`   - ${check}`);
    });
    allChecksPassed = false;
  }
});

console.log("\nüìã Resumo das corre√ß√µes implementadas:");
console.log("1. ‚úÖ Melhorado tratamento de token no api-client-server.ts");
console.log("2. ‚úÖ Adicionado logs detalhados para debug de autentica√ß√£o");
console.log("3. ‚úÖ Melhorado sincroniza√ß√£o de token no useTokenSync.ts");
console.log(
  "4. ‚úÖ Implementado redirecionamento autom√°tico em caso de erro 401"
);
console.log("5. ‚úÖ Criado componente de notifica√ß√£o de erro elegante");
console.log("6. ‚úÖ Melhorado feedback visual no OrderCard");
console.log("7. ‚úÖ Adicionado tratamento de erro espec√≠fico para cada a√ß√£o");

if (allChecksPassed) {
  console.log(
    "\nüéâ Todas as verifica√ß√µes passaram! A corre√ß√£o est√° implementada."
  );
  console.log("\nüìù Pr√≥ximos passos para testar:");
  console.log("1. Fa√ßa login no dashboard");
  console.log("2. V√° para a p√°gina de pedidos");
  console.log("3. Tente confirmar ou cancelar um pedido");
  console.log("4. Verifique se n√£o h√° mais erro 401");
  console.log("5. Teste com token expirado (se poss√≠vel)");
} else {
  console.log(
    "\n‚ö†Ô∏è  Algumas verifica√ß√µes falharam. Verifique os arquivos mencionados."
  );
}

console.log("\nüîß Para testar manualmente:");
console.log("1. Abra o DevTools (F12)");
console.log("2. V√° para a aba Console");
console.log("3. Tente atualizar o status de um pedido");
console.log("4. Verifique se aparecem os logs de sincroniza√ß√£o de token");
console.log("5. Se houver erro 401, verifique se o redirecionamento funciona");
