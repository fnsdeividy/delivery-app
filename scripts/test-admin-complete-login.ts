import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function testAdminCompleteLogin() {
  console.log('üëë Testando login completo do Super Admin...')

  try {
    // Dados do admin
    const adminData = {
      email: 'admin@cardapio.com',
      password: 'admin123',
      userType: 'lojista' // Como est√° configurado na p√°gina de login
    }

    console.log('üìã Dados de login:')
    console.log(`   Email: ${adminData.email}`)
    console.log(`   Senha: ${adminData.password}`)
    console.log(`   UserType: ${adminData.userType}`)

    // Verificar se admin existe
    const admin = await prisma.user.findUnique({
      where: { email: adminData.email }
    })

    if (!admin) {
      console.log('‚ùå Admin n√£o encontrado no banco')
      return
    }

    console.log('‚úÖ Admin encontrado no banco')
    console.log(`   Nome: ${admin.name}`)
    console.log(`   Role: ${admin.role}`)
    console.log(`   Ativo: ${admin.active}`)

    // Testar senha
    const isValidPassword = await bcrypt.compare(adminData.password, admin.password!)
    console.log(`üîë Senha v√°lida: ${isValidPassword ? '‚úÖ' : '‚ùå'}`)

    if (!isValidPassword) {
      console.log('‚ùå Senha incorreta')
      return
    }

    // Simular valida√ß√£o do NextAuth
    console.log('\nüîç Simulando valida√ß√£o do NextAuth:')
    
    if (!admin.active) {
      console.log('‚ùå Admin inativo')
      return
    }

    if (admin.role !== 'SUPER_ADMIN') {
      console.log('‚ùå Role n√£o √© SUPER_ADMIN')
      return
    }

    // Verificar se userType 'lojista' aceita SUPER_ADMIN
    if (adminData.userType === 'lojista') {
      if (admin.role !== 'ADMIN' && admin.role !== 'SUPER_ADMIN') {
        console.log('‚ùå SUPER_ADMIN n√£o √© aceito com userType lojista')
        return
      }
      console.log('‚úÖ SUPER_ADMIN √© aceito com userType lojista')
    }

    console.log('‚úÖ Todas as valida√ß√µes passaram!')

    // Testar redirecionamento
    console.log('\nüéØ Testando redirecionamento:')
    if (admin.role === 'SUPER_ADMIN') {
      console.log('‚úÖ Deve redirecionar para: /dashboard/gerenciar-lojas')
    }

    // Simular chamada da API de login
    console.log('\nüåê Simulando chamada da API de login...')
    
    const response = await fetch('http://localhost:3000/api/auth/callback/credentials', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(adminData),
    })

    console.log(`üìä Status da resposta: ${response.status}`)
    
    if (response.status === 302) {
      console.log('‚úÖ Redirecionamento 302 (esperado para NextAuth)')
      const location = response.headers.get('location')
      console.log(`üìç Location: ${location}`)
    } else if (response.ok) {
      console.log('‚úÖ Login bem-sucedido')
    } else {
      console.log('‚ùå Erro no login')
      const data = await response.text()
      console.log(`üìÑ Resposta: ${data}`)
    }

  } catch (error) {
    console.error('‚ùå Erro no teste:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testAdminCompleteLogin()
  .then(() => {
    console.log('\n‚úÖ Teste conclu√≠do!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå Erro no teste:', error)
    process.exit(1)
  }) 